import { __awaiter, __decorate, __generator } from "tslib";
import { Component, Input, NgZone, OnDestroy, OnChanges, SimpleChanges, Output } from '@angular/core';
import { DomSanitizer, SafeResourceUrl } from '@angular/platform-browser';
import { take } from 'rxjs/operators';
import { interval } from 'rxjs';
import { EventEmitter } from '@angular/core';
var NgxDocViewerComponent = /** @class */ (function () {
    function NgxDocViewerComponent(domSanitizer, ngZone) {
        this.domSanitizer = domSanitizer;
        this.ngZone = ngZone;
        this.fullUrl = null;
        this.externalViewer = false;
        this.docHtml = '';
        this.configuredViewer = 'google';
        this.checkIFrameSubscription = null;
        this.loaded = new EventEmitter();
        this.url = '';
        this.queryParams = '';
        this.viewerUrl = '';
        this.googleCheckInterval = 3000;
        this.disableContent = 'none';
        this.googleCheckContentLoaded = true;
    }
    NgxDocViewerComponent.prototype.ngOnDestroy = function () {
        if (this.checkIFrameSubscription) {
            this.checkIFrameSubscription.unsubscribe();
        }
    };
    NgxDocViewerComponent.prototype.ngOnChanges = function (changes) {
        return __awaiter(this, void 0, void 0, function () {
            var u, url, start, _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (changes && changes.viewer && (changes.viewer.isFirstChange || changes.viewer.currentValue !== changes.viewer.previousValue)) {
                            if (this.viewer !== 'google' && this.viewer !== 'office' &&
                                this.viewer !== 'mammoth' && this.viewer !== 'pdf' && this.viewer !== 'url') {
                                console.error("Unsupported viewer: '" + this.viewer + "'. Supported viewers: google, office, mammoth and pdf");
                            }
                            if (this.viewer === 'mammoth') {
                                if (mammoth === null) {
                                    console.error('please install mammoth when using local viewer');
                                }
                            }
                            this.configuredViewer = this.viewer;
                        }
                        if (this.disableContent !== 'none' && this.viewer !== 'google') {
                        }
                        if (!((changes.url && changes.url.currentValue !== changes.url.previousValue) ||
                            changes.viewer && changes.viewer.currentValue !== changes.viewer.previousValue ||
                            changes.viewerUrl && changes.viewerUrl.currentValue !== changes.viewerUrl.previousValue)) return [3 /*break*/, 4];
                        if (!changes.viewerUrl) {
                            this.viewerUrl = null;
                        }
                        switch (this.configuredViewer) {
                            case 'google':
                                this.viewerUrl = "https://docs.google.com/gview?url=%URL%&embedded=true";
                                break;
                            case 'office': {
                                this.viewerUrl = "https://view.officeapps.live.com/op/embed.aspx?src=%URL%";
                                break;
                            }
                            case 'pdf': {
                                this.viewerUrl = null;
                                break;
                            }
                        }
                        this.docHtml = '';
                        this.externalViewer = this.configuredViewer === 'google' || this.configuredViewer === 'office' || this.configuredViewer === 'url';
                        if (this.checkIFrameSubscription) {
                            this.checkIFrameSubscription.unsubscribe();
                        }
                        if (!!this.url) return [3 /*break*/, 1];
                        this.fullUrl = null;
                        return [3 /*break*/, 4];
                    case 1:
                        if (!(this.configuredViewer === 'office' || this.configuredViewer === 'google'
                            || this.configuredViewer === 'pdf' || this.configuredViewer === 'url')) return [3 /*break*/, 2];
                        u = this.url.indexOf('/') ? encodeURIComponent(this.url) : this.url;
                        url = this.viewerUrl ? this.viewerUrl.replace('%URL%', u) : this.url;
                        if (this.queryParams) {
                            start = this.queryParams.startsWith('&') ? '' : '&';
                            url = "" + url + start + this.queryParams;
                        }
                        this.fullUrl = this.domSanitizer.bypassSecurityTrustResourceUrl(url);
                        // see:
                        // https://stackoverflow.com/questions/40414039/google-docs-viewer-returning-204-responses-no-longer-working-alternatives
                        // hack to reload iframe if it's not loaded.
                        // would maybe be better to use view.officeapps.live.com but seems not to work with sas token.
                        if (this.configuredViewer === 'google' && this.googleCheckContentLoaded) {
                            this.ngZone.runOutsideAngular(function () {
                                var iframe = document.querySelector('iframe');
                                _this.checkIFrame(iframe);
                                // if it's not loaded after the googleIntervalCheck, then open load again.
                                _this.checkIFrameSubscription = interval(_this.googleCheckInterval)
                                    .pipe(take(Math.round(_this.googleCheckInterval === 0 ? 0 : 20000 / _this.googleCheckInterval)))
                                    .subscribe(function () {
                                    if (iframe == null) {
                                        iframe = document.querySelector('iframe');
                                        _this.checkIFrame(iframe);
                                    }
                                    _this.reloadIFrame(iframe);
                                });
                            });
                        }
                        return [3 /*break*/, 4];
                    case 2:
                        if (!(this.configuredViewer === 'mammoth')) return [3 /*break*/, 4];
                        if (!mammoth) {
                            console.error('Please install mammoth and make sure mammoth.browser.min.js is loaded.');
                        }
                        _a = this;
                        return [4 /*yield*/, this.getDocxToHtml(this.url)];
                    case 3:
                        _a.docHtml = _b.sent();
                        _b.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    NgxDocViewerComponent.prototype.checkIFrame = function (iframe) {
        var _this = this;
        if (iframe) {
            iframe.onload = function () {
                _this.loaded.emit(null);
                if (_this.checkIFrameSubscription) {
                    _this.checkIFrameSubscription.unsubscribe();
                }
            };
        }
    };
    NgxDocViewerComponent.prototype.reloadIFrame = function (iframe) {
        if (iframe) {
            console.log('reloading..');
            iframe.src = iframe.src;
        }
    };
    NgxDocViewerComponent.prototype.getDocxToHtml = function (url) {
        return __awaiter(this, void 0, void 0, function () {
            var arrayBuffer, resultObject;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fileToArray(url)];
                    case 1:
                        arrayBuffer = _a.sent();
                        return [4 /*yield*/, mammoth.convertToHtml({ arrayBuffer: arrayBuffer })];
                    case 2:
                        resultObject = _a.sent();
                        return [2 /*return*/, resultObject.value];
                }
            });
        });
    };
    NgxDocViewerComponent.prototype.fileToArray = function (url) {
        return new Promise(function (resolve, reject) {
            try {
                var request_1 = new XMLHttpRequest();
                request_1.open('GET', url, true);
                request_1.responseType = 'blob';
                request_1.onload = function () {
                    var reader = new FileReader();
                    reader.readAsArrayBuffer(request_1.response);
                    reader.onloadend = function (e) {
                        resolve(reader.result);
                    };
                };
                request_1.send();
            }
            catch (_a) {
                reject("error while retrieving file " + url + ".");
            }
        });
    };
    NgxDocViewerComponent.ctorParameters = function () { return [
        { type: DomSanitizer },
        { type: NgZone }
    ]; };
    __decorate([
        Output()
    ], NgxDocViewerComponent.prototype, "loaded", void 0);
    __decorate([
        Input()
    ], NgxDocViewerComponent.prototype, "url", void 0);
    __decorate([
        Input()
    ], NgxDocViewerComponent.prototype, "queryParams", void 0);
    __decorate([
        Input()
    ], NgxDocViewerComponent.prototype, "viewerUrl", void 0);
    __decorate([
        Input()
    ], NgxDocViewerComponent.prototype, "googleCheckInterval", void 0);
    __decorate([
        Input()
    ], NgxDocViewerComponent.prototype, "disableContent", void 0);
    __decorate([
        Input()
    ], NgxDocViewerComponent.prototype, "googleCheckContentLoaded", void 0);
    __decorate([
        Input()
    ], NgxDocViewerComponent.prototype, "viewer", void 0);
    NgxDocViewerComponent = __decorate([
        Component({
            selector: 'ngx-doc-viewer',
            template: "<ng-container *ngIf=\"!externalViewer\">\r\n    <div\r\n        *ngIf=\"configuredViewer !== 'pdf'\"\r\n        [innerHtml]=\"docHtml\"\r\n    ></div>\r\n    <embed\r\n        *ngIf=\"configuredViewer === 'pdf'\"\r\n        type=\"application/pdf\"\r\n        [src]=\"fullUrl\"\r\n        style=\"width: 100%; height: 100%;\"\r\n    />\r\n</ng-container>\r\n<ng-container *ngIf=\"externalViewer\">\r\n    <iframe\r\n        *ngIf=\"fullUrl && disableContent === 'none'\"\r\n        id=\"iframe\"\r\n        frameBorder=\"0\"\r\n        [src]=\"fullUrl\"\r\n    ></iframe>\r\n    <div\r\n        class=\"container\"\r\n        *ngIf=\"disableContent !== 'none'\"\r\n    >\r\n        <div\r\n            [class.overlay-full]=\"disableContent === 'all'\"\r\n            [class.overlay-popout-google]=\"configuredViewer ==='google' && (disableContent === 'popout' || disableContent === 'popout-hide')\"\r\n            [class.overlay-popout-office]=\"configuredViewer ==='office' && (disableContent === 'popout' || disableContent === 'popout-hide')\"\r\n            [style.background-color]=\"disableContent === 'popout-hide' ? '#fff': 'transparent'\"\r\n        >\r\n        </div>\r\n        <iframe\r\n            *ngIf=\"fullUrl\"\r\n            id=\"iframe\"\r\n            frameBorder=\"0\"\r\n            [src]=\"fullUrl\"\r\n        ></iframe>\r\n    </div>\r\n</ng-container>",
            styles: [":host {\n        display: block;\n    }\n    .container {\n        width: 100%;\n        height: 100%;\n        position: relative;\n    }\n    .overlay-popout-google {\n        width: 40px;\n        height: 40px;\n        right: 26px;\n        top: 11.5px;\n        position: absolute;\n        z-index: 1000;\n    }\n    .overlay-popout-office {\n        width: 100px;\n        height: 20px;\n        right: 0;\n        bottom: 0;\n        position: absolute;\n        z-index: 1000;\n    }\n    .overlay-full {\n        width: 100%;\n        height: 100%;\n        right: 0;\n        top: 0;\n        position: absolute;\n        z-index: 1000;\n    }\n    iframe {\n        width: 100%;\n        height: 100%;\n    }\n    "]
        })
    ], NgxDocViewerComponent);
    return NgxDocViewerComponent;
}());
export { NgxDocViewerComponent };
//# sourceMappingURL=data:application/json;base64,